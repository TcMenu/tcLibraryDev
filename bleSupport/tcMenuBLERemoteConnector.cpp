/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

#include "tcMenuBLERemoteConnector.h"

using namespace tcremote;

BLETagValTransport::BLETagValTransport() : TagValueTransport(TVAL_BUFFERED), fromApiCharacteristic(), readBuffer{},
                                           readBufferPos(0), writeBuffer{}, writeBufferPos(0) {
}

int BLETagValTransport::writeChar(char data) {
    if(readBufferPos < MAX_VALUE_LEN) {
        readBuffer[readBufferPos++] = data;
        return 1;
    }
    return 0;
}

int BLETagValTransport::writeStr(const char *data) {
    int countWritten = 0;
    while(data[countWritten]) {
        if(writeChar(data[countWritten])) return countWritten;
        countWritten++;
    }
}

uint8_t BLETagValTransport::readByte() {
    if(!readAvailable()) return -1;
    return readBuffer[readBufferPos];
}

bool BLETagValTransport::readAvailable() {
    if(readBufferPos < MAX_VALUE_LEN && readBuffer[readBufferPos] != 0) {
        return true;
    }

    if(fromApiCharacteristic.written()) {
        int len = fromApiCharacteristic.readValue(readBuffer, MAX_VALUE_LEN);
        if(len < MAX_VALUE_LEN) readBuffer[len] = 0;

        return len > 0 && readBuffer[0] != 0;
    }

    return false;
}

bool BLETagValTransport::available() {
    return writeBufferPos < MAX_VALUE_LEN;
}

bool BLETagValTransport::connected() {
    return device.connected();
}

void BLETagValTransport::close() {
    device.disconnect();
}

void BLETagValTransport::endMsg() {
    TagValueTransport::endMsg();

    // now attempt the write
    if(fromApiCharacteristic.writeValue((void*)writeBuffer, writeBufferPos) == 0) {
        close();
    }

    // reset buffer
    writeBufferPos = 0;
}

void BLETagValTransport::setDevice(BLEDevice &newDevice, BLEService &newService) {
    device = newDevice;
    service = newService;
    if(!serviceHasCharacteristics) {
        service.addCharacteristic(toApiCharacteristic);
        service.addCharacteristic(fromApiCharacteristic);
        serviceHasCharacteristics = true;
    }
}

BLEDeviceInitialisation::BLEDeviceInitialisation() : theService(bleServiceIdentifier){}

bool BLEDeviceInitialisation::attemptInitialisation() {
    if(!initialised && BLE.begin() == 0) return false;
    initialised = true;
    BLE.addService(theService);
    return true;
}

bool BLEDeviceInitialisation::attemptNewConnection(BaseRemoteServerConnection *transport) {
    BLE.poll();
    if(BLE.connected()) {
        auto central = BLE.central();
        reinterpret_cast<BLETagValTransport*>(transport)->setDevice(central, theService);
    }
}
