/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

// Generated for Arduino ESP32 by TcMenu 4.5.0 on 2025-10-29T13:21:48.042771Z.

#include <tcMenu.h>
#include "main_menu.h"
#include "ThemeMonoInverseBuilder.h"
#include <Fonts/OpenSansRegular7pt.h>

// Global variable declarations
const PROGMEM  ConnectorLocalInfo applicationInfo = { "Esp32IdfArduino", "6d266bc9-0ec8-43b2-9d71-18fbb2da95d3" };

AdafruitSSD1306I2c* gfx;
AdafruitDrawable gfxDrawable;
GraphicsDeviceRenderer renderer(30, applicationInfo.name, nullptr);

// Global Menu Item declarations
const PROGMEM AnyMenuInfo minfoPressMe = { "Press  me", 10, 0xffff, 0, onPressed };
ActionMenuItem menuPressMe(&minfoPressMe, nullptr, INFO_LOCATION_PGM);
const PROGMEM FloatMenuInfo minfoUpTime = { "Up Time", 9, 0xffff, 1, NO_CALLBACK };
FloatMenuItem menuUpTime(&minfoUpTime, 0.0, &menuPressMe, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoSettingsTemperature = { "Temp", 4, 0xffff, 150, NO_CALLBACK, -20, 1, "C" };
AnalogMenuItem menuSettingsTemperature(&minfoSettingsTemperature, 40, nullptr, INFO_LOCATION_PGM);
const char enumStrSettingsChoice_0[] PROGMEM = "Pizza";
const char enumStrSettingsChoice_1[] PROGMEM = "Pasta";
const char enumStrSettingsChoice_2[] PROGMEM = "Salad";
const char* const enumStrSettingsChoice[] PROGMEM  = { enumStrSettingsChoice_0, enumStrSettingsChoice_1, enumStrSettingsChoice_2 };
const PROGMEM EnumMenuInfo minfoSettingsChoice = { "Choice", 3, 0xffff, 2, NO_CALLBACK, enumStrSettingsChoice };
EnumMenuItem menuSettingsChoice(&minfoSettingsChoice, 0, &menuSettingsTemperature, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoSettings = { "Settings", 2, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackSettings(&minfoSettings, &menuSettingsChoice, INFO_LOCATION_PGM);
SubMenuItem menuSettings(&minfoSettings, &menuBackSettings, &menuUpTime, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoBoardInfoHeapAvl = { "Heap Avl", 8, 0xffff, 65355, NO_CALLBACK, 0, 1, "KB" };
AnalogMenuItem menuBoardInfoHeapAvl(&minfoBoardInfoHeapAvl, 0, nullptr, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoBoardInfoFlash = { "Flash", 7, 0xffff, 65355, NO_CALLBACK, 0, 10, "MB" };
AnalogMenuItem menuBoardInfoFlash(&minfoBoardInfoFlash, 0, &menuBoardInfoHeapAvl, INFO_LOCATION_PGM);
const PROGMEM AnyMenuInfo minfoBoardInfoFeatures = { "Features", 6, 0xffff, 0, NO_CALLBACK };
TextMenuItem menuBoardInfoFeatures(&minfoBoardInfoFeatures, "", 5, &menuBoardInfoFlash, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoBoardInfoCores = { "Cores", 5, 0xffff, 255, NO_CALLBACK, 0, 1, "" };
AnalogMenuItem menuBoardInfoCores(&minfoBoardInfoCores, 0, &menuBoardInfoFeatures, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoBoardInfo = { "Board Info", 1, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackBoardInfo(&minfoBoardInfo, &menuBoardInfoCores, INFO_LOCATION_PGM);
SubMenuItem menuBoardInfo(&minfoBoardInfo, &menuBackBoardInfo, &menuSettings, INFO_LOCATION_PGM);

void setupMenu() {
    // First we set up eeprom and authentication (if needed).
    setSizeBasedEEPROMStorageEnabled(true);
    // Code generated by plugins and new operators.
    gfx = new AdafruitSSD1306I2c(defaultWireTypePtr, 0xFF, 0x3c, 64, 128, ENCMODE_UTF8, SSD_1306);
    gfx->setRotation(0);
    gfx->begin();
    renderer.setUpdatesPerSecond(2);
    gfxDrawable.setGraphics(gfx);
    gfxDrawable.setFontHandler(gfx->getFontHandler());
    renderer.setDrawable(&gfxDrawable);
    switches.init(internalDigitalIo(), SWITCHES_POLL_EVERYTHING, true);
    menuMgr.initForEncoder(&renderer, &menuBoardInfo, 5, 6, 7);
    installMonoInverseTitleTheme(renderer, MenuFontDef(&OpenSansRegular7pt, 0), MenuFontDef(&OpenSansRegular7pt, 0), true, BaseGraphicalRenderer::TITLE_ALWAYS, true);
}

