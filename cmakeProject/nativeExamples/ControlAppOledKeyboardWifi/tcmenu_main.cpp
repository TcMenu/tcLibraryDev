/**
 * A tcMenu example for Pico that uses a keyboard for input, and an OLED screen for output. Simply load the menu into
 * tcMenu Designer by selecting the EMF file from the open menu.
 */
#include "generated/ControlAppOledKeyboardWifi_menu.h"
#include <graphics/TcThemeBuilder.h>
#include "Fonts/Org_01.h"
#include <PlatformDetermination.h>
#include <TaskManagerIO.h>
#include <hardware/i2c.h>

// This variable is the RAM data for scroll choice item Choices
char ramChoiceData[] = "1\0        2\0        3\0        4\0        5\0        ~";

#define I2C_SDA 12
#define I2C_CLK 13

void setupTheme();

void setup() {
    // prepare the I2C bus before setting up the menu
    i2c_init(i2c_default, 400 * 1000);
    gpio_set_function(I2C_SDA, GPIO_FUNC_I2C);
    gpio_set_function(I2C_CLK, GPIO_FUNC_I2C);
    gpio_pull_up(I2C_SDA);
    gpio_pull_up(I2C_CLK);
    ioaWireBegin(i2c_default);

    // now prepare logging
    IOLOG_START_SERIAL
    stdio_init_all();

    setupMenu();
    setupTheme();
}

int main() {
    setup();
    while(1) {
        taskManager.runLoop();
    }
}

// Bmps icon=2, width=20, height=20, size=60
const uint8_t directIconOn[] PROGMEM = {
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0c,0x00,0x00,0x0e,0x00,0x00,0x0f,0x00,0x1f,0xff,
        0x80,0x3f,0xff,0xc0,0x3f,0xff,0xe0,0x3f,0xff,0xe0,0x3f,0xff,0xe0,0x3f,0xff,0xc0,0x1f,0xff,0x80,0x00,
        0x0f,0x00,0x00,0x0e,0x00,0x00,0x0c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00

};
// Bmps icon=3, width=20, height=20, size=60
const uint8_t directIconOff[] PROGMEM = {
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x1c,0x00,0x00,0x1e,0x00,0x3f,0xf7,
        0x00,0x60,0x03,0x80,0x40,0x01,0xc0,0x40,0x00,0xc0,0x40,0x01,0xc0,0x60,0x03,0x80,0x3f,0xf7,0x00,0x00,
        0x1e,0x00,0x00,0x1c,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00

};

// icon=0, width=20, height=20, size=60, fmt=XBM_LSB_FIRST
const uint8_t protectIconOn[] PROGMEM = {
        0x00,0x00,0x00,0x00,0xfc,0x00,0x00,0xfe,0x00,0x00,0xfe,0x00,0x00,0x7f,0x00,0x00,0x7f,0x00,0x80,0x3f,
        0x00,0x80,0xff,0x07,0xc0,0xff,0x03,0xc0,0xff,0x01,0x00,0xff,0x00,0x80,0x3f,0x00,0x80,0x1f,0x00,0xc0,
        0x0f,0x00,0xe0,0x07,0x00,0xe0,0x03,0x00,0xf0,0x01,0x00,0x70,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x00

};

// XBM_LSB_FIRST width=20, height=20, size=60
const uint8_t protectIconOff[] PROGMEM = {
        0x00,0x0c,0x00,0x00,0x0e,0x00,0x00,0x0f,0x00,0x80,0x2f,0x08,0xc0,0x2d,0x08,0xff,0x4c,0x04,0x7f,0x4c,
        0x04,0x03,0x8c,0x02,0x03,0x8c,0x02,0x03,0x0c,0x01,0x03,0x0c,0x01,0x03,0x8c,0x02,0x03,0x8c,0x02,0x7f,
        0x4c,0x04,0xff,0x4c,0x04,0xc0,0x2d,0x08,0x80,0x2f,0x08,0x00,0x0f,0x00,0x00,0x0e,0x00,0x00,0x0c,0x00

};
// Test icon=1, width=20, height=20, size=60, fmt=MONO_BITMAP
const uint8_t muteIconReg[] PROGMEM = {
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x01,0xc0,0x00,0x03,0xe0,0x00,0x07,0xf0,0x00,0x0f,
        0xe0,0x00,0x1f,0xc0,0x00,0x3f,0x80,0x10,0x7f,0x00,0x38,0xfe,0x00,0x7d,0xfc,0x00,0xff,0xf8,0x00,0x7f,
        0xf0,0x00,0x3f,0xe0,0x00,0x1f,0xc0,0x00,0x0f,0x80,0x00,0x07,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00

};

// PALETTE_2BPP width=8, height=3, size=3
// auto size = Coord(8, 3);
const color_t var1_palette[] PROGMEM { RGB(0,0,0), RGB(255,255,255), RGB(255,0,0), RGB(0,0,255) };
const uint8_t var13[] PROGMEM = {
        0x03,0x02,0x01,0x06,0x05,0x04
};
DrawableIcon icon(202, Coord(20, 20), tcgfx::DrawableIcon::ICON_PALLETE_2BPP, var1_palette, muteIconReg);

void setupTheme() {
    color_t defaultItemPaletteMono[] = {WHITE, BLACK, WHITE, WHITE};
    TcThemeBuilder themeBuilder(renderer);
    serlogF2(SER_DEBUG, "Loading themes, size = ", sizeof(themeBuilder));

    themeBuilder.withSelectedColors(0, 1)
            .withRenderingSettings(tcgfx::BaseGraphicalRenderer::TITLE_ALWAYS, false)
            .enablingTcUnicode()
            .withItemPadding(MenuPadding(2))
            .withTitlePadding(MenuPadding(1))
            .withStandardLowResCursorIcons()
            .withPalette(defaultItemPaletteMono)
            .withAdaFont(&Org_01)
            .withSpacing(1);

    themeBuilder.defaultTitleProperties()
            .withBorder(MenuBorder(0, 0, 2, 0))
            .withJustification(tcgfx::GridPosition::JUSTIFY_CENTER_NO_VALUE)
            .apply();
    themeBuilder.defaultItemProperties()
            .withJustification(tcgfx::GridPosition::JUSTIFY_TITLE_LEFT_VALUE_RIGHT)
            .apply();
    themeBuilder.defaultActionProperties()
            .withJustification(tcgfx::GridPosition::JUSTIFY_CENTER_NO_VALUE)
            .apply();

    themeBuilder.menuItemOverride(menuMute)
        .onRowCol(3, 1, 3)
        .withMonoBitmap(Coord(20, 20), muteIconReg)
        .apply();

    themeBuilder.menuItemOverride(menuDirect)
        .onRowCol(3, 2, 3)
        .withMonoBitmap(Coord(20, 20), directIconOff, directIconOn)
        .apply();

    themeBuilder.menuItemOverride(menuProtect)
        .onRowCol(3, 3, 3)
        .withImageXbmp(Coord(20, 20), protectIconOff, protectIconOn)
        .apply();

    themeBuilder.apply();
}
