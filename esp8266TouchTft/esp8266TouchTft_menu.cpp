/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

#include <tcMenu.h>
#include "esp8266TouchTft_menu.h"
#include "ThemeCoolBlueModern.h"

// Global variable declarations
const PROGMEM  ConnectorLocalInfo applicationInfo = { "ESP8266 Touch", "cc66fbc2-6557-42fa-a098-44466b48ac42" };
ArduinoEEPROMAbstraction glArduinoEeprom(&EEPROM);
EepromAuthenticatorManager authManager(6);
TFT_eSPI gfx;
TfteSpiDrawable gfxDrawable(&gfx, 0);
GraphicsDeviceRenderer renderer(30, applicationInfo.name, &gfxDrawable);
XPT2046_Touchscreen touchDevice(PIN_D1, 0xFF);
iotouch::AdaLibTouchInterrogator touchInterrogator(touchDevice);
MenuTouchScreenManager touchScreen(&touchInterrogator, &renderer, iotouch::TouchInterrogator::LANDSCAPE_INVERTED);

// Global Menu Item declarations
const PROGMEM char pgmStrConnectivityAuthenticatorText[] = { "Authenticator" };
EepromAuthenticationInfoMenuItem menuConnectivityAuthenticator(pgmStrConnectivityAuthenticatorText, NO_CALLBACK, 14, NULL);
const PROGMEM char pgmStrConnectivityIoTMonitorText[] = { "IoT Monitor" };
RemoteMenuItem menuConnectivityIoTMonitor(pgmStrConnectivityIoTMonitorText, 13, &menuConnectivityAuthenticator);
RENDERING_CALLBACK_NAME_INVOKE(fnConnectivityRtCall, backSubItemRenderFn, "Connectivity", -1, NO_CALLBACK)
const PROGMEM SubMenuInfo minfoConnectivity = { "Connectivity", 12, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackConnectivity(fnConnectivityRtCall, &menuConnectivityIoTMonitor);
SubMenuItem menuConnectivity(&minfoConnectivity, &menuBackConnectivity, NULL);
ListRuntimeMenuItem menuMoreItemsMyList(11, 0, fnMoreItemsMyListRtCall, NULL);
RENDERING_CALLBACK_NAME_INVOKE(fnMoreItemsRGBRtCall, rgbAlphaItemRenderFn, "RGB", -1, NO_CALLBACK)
Rgb32MenuItem menuMoreItemsRGB(10, fnMoreItemsRGBRtCall, false, &menuMoreItemsMyList);
RENDERING_CALLBACK_NAME_INVOKE(fnMoreItemsNewTextItemRtCall, timeItemRenderFn, "New TextItem", 19, NO_CALLBACK)
TimeFormattedMenuItem menuMoreItemsNewTextItem(fnMoreItemsNewTextItemRtCall, 9, (MultiEditWireType)3, &menuMoreItemsRGB);
RENDERING_CALLBACK_NAME_INVOKE(fnMoreItemsDateRtCall, dateItemRenderFn, "Date", 15, NO_CALLBACK)
DateFormattedMenuItem menuMoreItemsDate(fnMoreItemsDateRtCall, 8, &menuMoreItemsNewTextItem);
const PROGMEM AnyMenuInfo minfoMoreItemsPressMe = { "PressMe", 7, 0xffff, 0, onPressMe };
ActionMenuItem menuMoreItemsPressMe(&minfoMoreItemsPressMe, &menuMoreItemsDate);
const PROGMEM BooleanMenuInfo minfoMoreItemsBool1 = { "Bool1", 6, 14, 1, NO_CALLBACK, NAMING_YES_NO };
BooleanMenuItem menuMoreItemsBool1(&minfoMoreItemsBool1, false, &menuMoreItemsPressMe);
RENDERING_CALLBACK_NAME_INVOKE(fnMoreItemsRtCall, backSubItemRenderFn, "More Items", -1, NO_CALLBACK)
const PROGMEM SubMenuInfo minfoMoreItems = { "More Items", 5, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackMoreItems(fnMoreItemsRtCall, &menuMoreItemsBool1);
SubMenuItem menuMoreItems(&minfoMoreItems, &menuBackMoreItems, &menuConnectivity);
const char enumStrFoods_0[] PROGMEM = "Pizza";
const char enumStrFoods_1[] PROGMEM = "Pasta";
const char enumStrFoods_2[] PROGMEM = "Salad";
const char enumStrFoods_3[] PROGMEM = "Chips";
const char* const enumStrFoods[] PROGMEM  = { enumStrFoods_0, enumStrFoods_1, enumStrFoods_2, enumStrFoods_3 };
const PROGMEM EnumMenuInfo minfoFoods = { "Foods", 4, 0xffff, 3, NO_CALLBACK, enumStrFoods };
EnumMenuItem menuFoods(&minfoFoods, 0, &menuMoreItems);
RENDERING_CALLBACK_NAME_INVOKE(fnLargeNumRtCall, largeNumItemRenderFn, "Large Num", 6, onLargeNum)
EditableLargeNumberMenuItem menuLargeNum(fnLargeNumRtCall, 3, 8, 3, true, &menuFoods);
const PROGMEM AnalogMenuInfo minfoHalves = { "Halves", 2, 4, 100, NO_CALLBACK, 0, 2, "H" };
AnalogMenuItem menuHalves(&minfoHalves, 0, &menuLargeNum);
const PROGMEM AnalogMenuInfo minfoDecimalTens = { "DecimalTens", 1, 2, 1000, onDecimalTens, 0, 10, "T" };
AnalogMenuItem menuDecimalTens(&minfoDecimalTens, 0, &menuHalves);

void setupMenu() {
    // First we set up eeprom and authentication (if needed).
    menuMgr.setEepromRef(&glArduinoEeprom);
    authManager.initialise(menuMgr.getEepromAbstraction(), 200);
    menuMgr.setAuthenticator(&authManager);
    // Code generated by plugins.
    gfx.begin();
    gfx.setRotation(3);
    renderer.setUpdatesPerSecond(10);
    touchInterrogator.init();
    touchScreen.start();
    menuMgr.initWithoutInput(&renderer, &menuDecimalTens);
    renderer.setTitleMode(BaseGraphicalRenderer::TITLE_ALWAYS);
    renderer.setUseSliderForAnalog(true);
    installCoolBlueModernTheme(renderer, MenuFontDef(nullptr, 4), MenuFontDef(nullptr, 4), false);
}

