/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

#ifndef TCMENU_BLEREMOTECONNECTOR_H
#define TCMENU_BLEREMOTECONNECTOR_H

#include <PlatformDetermination.h>
#include <RemoteTypes.h>
#include <RemoteConnector.h>
#include <MessageProcessors.h>
#include <ArduinoBLE.h>
#include <remote/BaseRemoteComponents.h>

extern const PROGMEM ConnectorLocalInfo applicationInfo;

namespace tcremote {

    const char bleServiceIdentifier[] PROGMEM = {"8589F957-1916-4B27-BA6D-B0AF36F317EF"};
    const char characteristicApiToDevice[] PROGMEM = {"7E7CA4D5-CF52-4918-BD60-6E98A810F0EB"};
    const char characteristicDeviceToApi[] PROGMEM = {"D361F4F9-B13D-4118-A6C4-B54CF12EED3C"};

    class BLEDeviceInitialisation : public DeviceInitialisation {
    private:
        BLEDevice theDevice;
        BLEService theService;
    public:
        BLEDeviceInitialisation();

        bool attemptInitialisation() override;

        bool attemptNewConnection(BaseRemoteServerConnection *connection) override;
    };

    class BLETagValTransport : public TagValueTransport {
    private:
        BLEDevice device;
        BLEService service;
        BLECharacteristic toApiCharacteristic;
        BLECharacteristic fromApiCharacteristic;
        char readBuffer[MAX_VALUE_LEN];
        int readBufferPos;
        char writeBuffer[MAX_VALUE_LEN];
        int writeBufferPos;
        bool serviceHasCharacteristics = false;
    public:

        BLETagValTransport();

        void setDevice(BLEDevice& newDevice, BLEService& newService);

        void flush() override {}

        int writeChar(char data) override;

        int writeStr(const char *data) override;

        uint8_t readByte() override;

        bool readAvailable() override;

        bool available() override;

        bool connected() override;

        void close() override;

        void endMsg() override;
    };
}

#endif //TCMENU_BLEREMOTECONNECTOR_H
