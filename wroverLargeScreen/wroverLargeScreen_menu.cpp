/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
*/

#include <Arduino.h>
#include <tcMenu.h>
#include "wroverLargeScreen_menu.h"

// Global variable declarations

const PROGMEM ConnectorLocalInfo applicationInfo = { "Stereo Amplifier", "52909ce2-3fd9-4c67-b914-def4b6e04671" };
Adafruit_ILI9341 gfx(22, 21, 18);
AdaColorGfxMenuConfig gfxConfig;
AdaFruitGfxMenuRenderer renderer;
WiFiServer server(3333);

// Global Menu Item declarations

const AnalogMenuInfo PROGMEM minfoStatusHeatsinkTemp = { "Heatsink Temp", 13, 0xFFFF, 255, NO_CALLBACK, 0, 1, "C" };
AnalogMenuItem menuStatusHeatsinkTemp(&minfoStatusHeatsinkTemp, 0, NULL);
const AnalogMenuInfo PROGMEM minfoStatusRightLevel = { "Right Level", 12, 0xFFFF, 4096, NO_CALLBACK, 0, 1, "mV" };
AnalogMenuItem menuStatusRightLevel(&minfoStatusRightLevel, 0, &menuStatusHeatsinkTemp);
const AnalogMenuInfo PROGMEM minfoStatusLeftLevel = { "Left Level", 11, 0xFFFF, 4096, NO_CALLBACK, 0, 1, "mV" };
AnalogMenuItem menuStatusLeftLevel(&minfoStatusLeftLevel, 0, &menuStatusRightLevel);
const SubMenuInfo PROGMEM minfoStatus = { "Status", 5, 0xFFFF, 0, NO_CALLBACK };
RENDERING_CALLBACK_NAME_INVOKE(fnStatusRtCall, backSubItemRenderFn, "Status", -1, NO_CALLBACK)
BackMenuItem menuBackStatus(fnStatusRtCall, &menuStatusLeftLevel);
SubMenuItem menuStatus(&minfoStatus, &menuBackStatus, NULL);
const AnyMenuInfo PROGMEM minfoSettingsSaveAll = { "Save all", 10, 0xFFFF, 0, onSave };
ActionMenuItem menuSettingsSaveAll(&minfoSettingsSaveAll, NULL);
const AnalogMenuInfo PROGMEM minfoSettingsIn3Trim = { "In 3 Trim", 9, 13, 20, onTrimChange, -10, 2, "dB" };
AnalogMenuItem menuSettingsIn3Trim(&minfoSettingsIn3Trim, 0, &menuSettingsSaveAll);
const AnalogMenuInfo PROGMEM minfoSettingsIn2Trim = { "In 2 Trim", 8, 11, 20, onTrimChange, -10, 2, "dB" };
AnalogMenuItem menuSettingsIn2Trim(&minfoSettingsIn2Trim, 0, &menuSettingsIn3Trim);
const AnalogMenuInfo PROGMEM minfoSettingsIn1Trim = { "In 1 Trim", 7, 9, 20, onTrimChange, -10, 2, "dB" };
AnalogMenuItem menuSettingsIn1Trim(&minfoSettingsIn1Trim, 0, &menuSettingsIn2Trim);
const AnalogMenuInfo PROGMEM minfoSettingsMaxOnVol = { "Max On Vol", 6, 7, 255, NO_CALLBACK, -180, 2, "dB" };
AnalogMenuItem menuSettingsMaxOnVol(&minfoSettingsMaxOnVol, 0, &menuSettingsIn1Trim);
const SubMenuInfo PROGMEM minfoSettings = { "Settings", 4, 0xFFFF, 0, NO_CALLBACK };
RENDERING_CALLBACK_NAME_INVOKE(fnSettingsRtCall, backSubItemRenderFn, "Settings", -1, NO_CALLBACK)
BackMenuItem menuBackSettings(fnSettingsRtCall, &menuSettingsMaxOnVol);
SubMenuItem menuSettings(&minfoSettings, &menuBackSettings, &menuStatus);
const BooleanMenuInfo PROGMEM minfoMuteAll = { "Mute all", 3, 6, 1, NO_CALLBACK, NAMING_ON_OFF };
BooleanMenuItem menuMuteAll(&minfoMuteAll, false, &menuSettings);
const char enumStrChannel_0[] PROGMEM  = "Turntable";
const char enumStrChannel_1[] PROGMEM  = "Computer";
const char enumStrChannel_2[] PROGMEM  = "Auxillary";
const char* const enumStrChannel[] PROGMEM  = { enumStrChannel_0, enumStrChannel_1, enumStrChannel_2 };
const EnumMenuInfo PROGMEM minfoChannel = { "Channel", 2, 4, 2, onChannelChanged, enumStrChannel };
EnumMenuItem menuChannel(&minfoChannel, 0, &menuMuteAll);
const AnalogMenuInfo PROGMEM minfoVolume = { "Volume", 1, 2, 255, onVolumeChanged, -180, 2, "dB" };
AnalogMenuItem menuVolume(&minfoVolume, 0, &menuChannel);


// Set up code

void setupMenu() {
    menuStatusHeatsinkTemp.setReadOnly(true);

    prepareAdaColorDefaultGfxConfig(&gfxConfig);
    gfx.begin();
    gfx.setRotation(1);
    renderer.setGraphicsDevice(&gfx, &gfxConfig);
    menuMgr.initWithoutInput(&renderer, &menuVolume);
    //remoteServer.begin(&server, &applicationInfo);
}
