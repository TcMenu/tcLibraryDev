/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

#include <tcMenu.h>
#include "xioAlarmPanel_menu.h"
#include "ThemeDarkModeTraditional.h"
#include <Fonts/FreeSans9pt7b.h>

// Global variable declarations
const  ConnectorLocalInfo applicationInfo = { "Home Alarm", "456de210-3262-4409-9576-76d4932163b3" };

Adafruit_ST7735 gfx(1, 0, -1);
AdafruitDrawable gfxDrawable(&gfx);
GraphicsDeviceRenderer renderer(30, applicationInfo.name, &gfxDrawable);

// Global Menu Item declarations
const AnyMenuInfo minfoEmergencyAlarm = { "Emergency Alarm", 12, 0xffff, 0, NO_CALLBACK };
ActionMenuItem menuEmergencyAlarm(&minfoEmergencyAlarm, NULL);
const AnalogMenuInfo minfoTemperature = { "Temperature", 11, 0xffff, 255, NO_CALLBACK, 0, 2, "C" };
AnalogMenuItem menuTemperature(&minfoTemperature, 0, &menuEmergencyAlarm);
RENDERING_CALLBACK_NAME_INVOKE(fnZonesRtCall, textItemRenderFn, "Zones", -1, NO_CALLBACK)
TextMenuItem menuZones(fnZonesRtCall, 9, 6, &menuTemperature);
const char enumStrStatus_0[] = "Stand By";
const char enumStrStatus_1[] = "Part Armed";
const char enumStrStatus_2[] = "Fully Armed";
const char enumStrStatus_3[] = "Tamper";
const char enumStrStatus_4[] = "Fault";
const char enumStrStatus_5[] = "Emergency";
const char* const enumStrStatus[]  = { enumStrStatus_0, enumStrStatus_1, enumStrStatus_2, enumStrStatus_3, enumStrStatus_4, enumStrStatus_5 };
const EnumMenuInfo minfoStatus = { "Status", 7, 0xffff, 5, NO_CALLBACK, enumStrStatus };
EnumMenuItem menuStatus(&minfoStatus, 0, &menuZones);
ListRuntimeMenuItem menuZoneHistory(10, 0, fnZoneHistoryRtCall, &menuStatus);
const BooleanMenuInfo minfoZonesEnableFire = { "Enable Fire", 6, 0xffff, 1, onZoneEnablement, NAMING_TRUE_FALSE };
BooleanMenuItem menuZonesEnableFire(&minfoZonesEnableFire, false, NULL);
const BooleanMenuInfo minfoZonesEnableZ3 = { "Enable Z3", 5, 0xffff, 1, onZoneEnablement, NAMING_TRUE_FALSE };
BooleanMenuItem menuZonesEnableZ3(&minfoZonesEnableZ3, false, &menuZonesEnableFire);
const BooleanMenuInfo minfoZonesEnableZ2 = { "Enable Z2", 4, 0xffff, 1, onZoneEnablement, NAMING_TRUE_FALSE };
BooleanMenuItem menuZonesEnableZ2(&minfoZonesEnableZ2, false, &menuZonesEnableZ3);
const BooleanMenuInfo minfoZonesEnableZ1 = { "Enable Z1", 3, 0xffff, 1, onZoneEnablement, NAMING_TRUE_FALSE };
BooleanMenuItem menuZonesEnableZ1(&minfoZonesEnableZ1, false, &menuZonesEnableZ2);
RENDERING_CALLBACK_NAME_INVOKE(fnZoneRtCall, backSubItemRenderFn, "Zone Settings", -1, NO_CALLBACK)
const SubMenuInfo minfoZone = { "Zone Settings", 2, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackZone(fnZoneRtCall, &menuZonesEnableZ1);
SubMenuItem menuZone(&minfoZone, &menuBackZone, &menuZoneHistory);
const BooleanMenuInfo minfoArmed = { "Armed", 1, 0xffff, 1, onArmed, NAMING_TRUE_FALSE };
BooleanMenuItem menuArmed(&minfoArmed, false, &menuZone);

void setupMenu() {
    // First we set up eeprom and authentication (if needed).

    // Now add any readonly, non-remote and visible flags.
    menuTemperature.setReadOnly(true);
    menuZones.setReadOnly(true);
    menuStatus.setReadOnly(true);

    // Code generated by plugins.
    gfx.initR(INITR_GREENTAB);
    gfx.setRotation(0);
    renderer.setUpdatesPerSecond(5);
    switches.initialise(internalDigitalIo(), true);
    menuMgr.initForEncoder(&renderer, &menuArmed, 5, 6, 9);
    renderer.setTitleMode(BaseGraphicalRenderer::TITLE_ALWAYS);
    renderer.setUseSliderForAnalog(true);
    installDarkModeTraditionalTheme(renderer, MenuFontDef(nullptr, 1), MenuFontDef(&FreeSans9pt7b, 1), true);
}

